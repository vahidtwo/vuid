{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"VUID Package","text":"<ul> <li>Github repository: https://github.com/vahidtwo/vuid/</li> <li>Documentation https://vahidtwo.github.io/vuid/</li> <li>PIPY Package https://pypi.org/project/vuid/</li> </ul> <p>The VUID is a Python package designed to generate vahid unique identifiers (VUIDs) based on a custom epoch time and a base-62 encoding scheme. The package provides a simple and efficient way to create unique IDs that can be used in various applications, such as database keys, distributed systems, or any scenario where uniqueness is critical.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Custom Epoch Time: The package uses a custom epoch time (<code>START_EPOC_TIME</code>) to ensure uniqueness and avoid   collisions with other timestamp-based ID systems.</li> <li>Base-62 Encoding: Utilizes a base-62 encoding scheme (0-9, A-Z, a-z) to generate compact and human-readable IDs.</li> <li>High Performance: Capable of generating over 800,000 unique IDs per second, making it suitable for high-throughput   systems.</li> <li>Timestamp Extraction: Allows extraction of the creation timestamp from a generated VUID.</li> <li>Randomness: Adds a 4-character random suffix to each ID to further ensure uniqueness.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the package, use pip:</p> <pre><code>pip install vuid\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#generating-a-vuid","title":"Generating a VUID","text":"<p>To generate a unique VUID, simply create an instance of the <code>VUID</code> class with a timestamp:</p> <p>Usage Example</p> SimpleAdvance <p> <pre><code>  from datetime import datetime\n  from vuid import VUID\n\n  # Generate a VUID using the current time\n  timestamp = datetime.now().timestamp()\n  vuid = VUID(timestamp)\n\n  print(vuid)  # Example output: \"1A2b3C4d5\"\n</code></pre> </p> <p> <pre><code>  from datetime import datetime\n  from vuid import VUID\n\n  # Generate a VUID using the current time\n  timestamp = datetime.now().timestamp()\n  vuid = VUID(timestamp, prefix='C', extra=1738)\n\n  print(vuid)  # Example output: \"CS21A2b3C4d5\"\n</code></pre> </p>"},{"location":"#extracting-the-creation-time","title":"Extracting the Creation Time","text":"<p>You can extract the creation time of a VUID using the <code>created_time</code> property:</p> <pre><code>creation_time = vuid.created_time\nprint(creation_time)  # Example output: \"2025-01-04 12:04:08\"\n</code></pre>"},{"location":"#creating-a-vuid-from-an-existing-code","title":"Creating a VUID from an Existing Code","text":"<p>If you already have a VUID code, you can create a <code>VUID</code> object from it:</p> <pre><code>existing_code = \"CS21A2b3C4d5\"\nvuid = VUID.from_code(existing_code)\n\nprint(vuid.created_time)  # Output: \"2025-07-22 05:24:09\"\nprint(vuid.extra)  # Output: 1738\nprint(vuid.prefix)  # Output: \"C\"\n</code></pre>"},{"location":"#comparing-vuids","title":"Comparing VUIDs","text":"<p>The <code>VUID</code> class supports comparison operations, allowing you to compare two VUIDs:</p> <pre><code>vuid1 = VUID(datetime.now().timestamp())\nvuid2 = VUID(datetime.now().timestamp())\n\nprint(vuid1 == vuid2)  # False\nprint(vuid1 &lt; vuid2)  # True or False, depending on the timestamps\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#vuidtimestamp-int-prefix-str-extra-int-none","title":"<code>VUID(timestamp: int, *, prefix: str = \"\", extra: int = None)</code>","text":"<ul> <li>Parameters:</li> <li><code>timestamp</code>: A timestamp (in seconds) used to generate the VUID.</li> <li><code>prefix</code>: A string used to add as prefix in the VUID.</li> <li><code>extra</code>: An integer to save extra info in the VUID.</li> <li>Returns: A <code>VUID</code> object.</li> </ul>"},{"location":"#vuidfrom_codecode-str-extra_index-int-none-none","title":"<code>VUID.from_code(code: str, *, extra_index: int | None = None)</code>","text":"<ul> <li>Parameters:</li> <li><code>code</code>: An existing VUID code.</li> <li><code>extra_index</code>: if you have put extra you must the start index of the extra.</li> <li>Returns: A <code>VUID</code> object.</li> </ul>"},{"location":"#properties","title":"Properties","text":"<ul> <li><code>code</code>: Returns the code as a string.</li> <li><code>extra</code>: Returns the extra as an integer.</li> <li><code>created_time</code>: Returns the creation time of the VUID as a <code>datetime</code> object.</li> </ul>"},{"location":"#methods","title":"Methods","text":"<ul> <li><code>__str__()</code>: Returns the VUID as a string.</li> <li><code>__repr__()</code>: Returns a formal representation of the VUID.</li> <li><code>__eq__(other)</code>: Compares two VUIDs for equality.</li> <li><code>__hash__()</code>: Returns the hash of the VUID.</li> <li><code>__lt__(other)</code>, <code>__le__(other)</code>, <code>__gt__(other)</code>, <code>__ge__(other)</code>, <code>__ne__(other)</code>: Comparison methods for VUIDs.</li> </ul>"},{"location":"#performance","title":"Performance","text":"<ul> <li>The package is optimized for high performance, capable of generating over 800,000 unique IDs per second.</li> <li>Tested to generate 11,592,876 unique codes in 14.04 seconds.</li> </ul>"},{"location":"#limitations","title":"Limitations","text":"<ul> <li>The current implementation supports IDs with a maximum length of 9 characters. If the timestamp exceeds the 5-character   limit (after base-62 encoding), a warning will be logged.</li> <li>The package is designed to work until January 15, 2054, after which the timestamp encoding will overflow.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request on the GitHub repository.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the BEER-WARE License. See the LICENSE file for details.</p>"}]}